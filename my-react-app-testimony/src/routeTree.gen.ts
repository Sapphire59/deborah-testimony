/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScriptureRouteImport } from './routes/scripture'
import { Route as PhotosRouteImport } from './routes/photos'
import { Route as MusicRouteImport } from './routes/music'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const ScriptureRoute = ScriptureRouteImport.update({
  id: '/scripture',
  path: '/scripture',
  getParentRoute: () => rootRouteImport,
} as any)
const PhotosRoute = PhotosRouteImport.update({
  id: '/photos',
  path: '/photos',
  getParentRoute: () => rootRouteImport,
} as any)
const MusicRoute = MusicRouteImport.update({
  id: '/music',
  path: '/music',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/music': typeof MusicRoute
  '/photos': typeof PhotosRoute
  '/scripture': typeof ScriptureRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/music': typeof MusicRoute
  '/photos': typeof PhotosRoute
  '/scripture': typeof ScriptureRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/music': typeof MusicRoute
  '/photos': typeof PhotosRoute
  '/scripture': typeof ScriptureRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/music' | '/photos' | '/scripture'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/music' | '/photos' | '/scripture'
  id: '__root__' | '/' | '/about' | '/music' | '/photos' | '/scripture'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MusicRoute: typeof MusicRoute
  PhotosRoute: typeof PhotosRoute
  ScriptureRoute: typeof ScriptureRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/scripture': {
      id: '/scripture'
      path: '/scripture'
      fullPath: '/scripture'
      preLoaderRoute: typeof ScriptureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/photos': {
      id: '/photos'
      path: '/photos'
      fullPath: '/photos'
      preLoaderRoute: typeof PhotosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/music': {
      id: '/music'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof MusicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MusicRoute: MusicRoute,
  PhotosRoute: PhotosRoute,
  ScriptureRoute: ScriptureRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
